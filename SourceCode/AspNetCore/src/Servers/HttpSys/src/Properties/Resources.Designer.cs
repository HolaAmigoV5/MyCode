// <auto-generated />
namespace Microsoft.AspNetCore.Server.HttpSys
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Server.HttpSys.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// The destination array is too small.
        /// </summary>
        internal static string Exception_ArrayTooSmall
        {
            get { return GetString("Exception_ArrayTooSmall"); }
        }

        /// <summary>
        /// The destination array is too small.
        /// </summary>
        internal static string FormatException_ArrayTooSmall()
        {
            return GetString("Exception_ArrayTooSmall");
        }

        /// <summary>
        /// End has already been called.
        /// </summary>
        internal static string Exception_EndCalledMultipleTimes
        {
            get { return GetString("Exception_EndCalledMultipleTimes"); }
        }

        /// <summary>
        /// End has already been called.
        /// </summary>
        internal static string FormatException_EndCalledMultipleTimes()
        {
            return GetString("Exception_EndCalledMultipleTimes");
        }

        /// <summary>
        /// The status code '{0}' is not supported.
        /// </summary>
        internal static string Exception_InvalidStatusCode
        {
            get { return GetString("Exception_InvalidStatusCode"); }
        }

        /// <summary>
        /// The status code '{0}' is not supported.
        /// </summary>
        internal static string FormatException_InvalidStatusCode(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Exception_InvalidStatusCode"), p0);
        }

        /// <summary>
        /// The stream is not seekable.
        /// </summary>
        internal static string Exception_NoSeek
        {
            get { return GetString("Exception_NoSeek"); }
        }

        /// <summary>
        /// The stream is not seekable.
        /// </summary>
        internal static string FormatException_NoSeek()
        {
            return GetString("Exception_NoSeek");
        }

        /// <summary>
        /// The prefix '{0}' is already registered.
        /// </summary>
        internal static string Exception_PrefixAlreadyRegistered
        {
            get { return GetString("Exception_PrefixAlreadyRegistered"); }
        }

        /// <summary>
        /// The prefix '{0}' is already registered.
        /// </summary>
        internal static string FormatException_PrefixAlreadyRegistered(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Exception_PrefixAlreadyRegistered"), p0);
        }

        /// <summary>
        /// This stream only supports read operations.
        /// </summary>
        internal static string Exception_ReadOnlyStream
        {
            get { return GetString("Exception_ReadOnlyStream"); }
        }

        /// <summary>
        /// This stream only supports read operations.
        /// </summary>
        internal static string FormatException_ReadOnlyStream()
        {
            return GetString("Exception_ReadOnlyStream");
        }

        /// <summary>
        /// More data written than specified in the Content-Length header.
        /// </summary>
        internal static string Exception_TooMuchWritten
        {
            get { return GetString("Exception_TooMuchWritten"); }
        }

        /// <summary>
        /// More data written than specified in the Content-Length header.
        /// </summary>
        internal static string FormatException_TooMuchWritten()
        {
            return GetString("Exception_TooMuchWritten");
        }

        /// <summary>
        /// Only the http and https schemes are supported.
        /// </summary>
        internal static string Exception_UnsupportedScheme
        {
            get { return GetString("Exception_UnsupportedScheme"); }
        }

        /// <summary>
        /// Only the http and https schemes are supported.
        /// </summary>
        internal static string FormatException_UnsupportedScheme()
        {
            return GetString("Exception_UnsupportedScheme");
        }

        /// <summary>
        /// This stream only supports write operations.
        /// </summary>
        internal static string Exception_WriteOnlyStream
        {
            get { return GetString("Exception_WriteOnlyStream"); }
        }

        /// <summary>
        /// This stream only supports write operations.
        /// </summary>
        internal static string FormatException_WriteOnlyStream()
        {
            return GetString("Exception_WriteOnlyStream");
        }

        /// <summary>
        /// The given IAsyncResult does not match this opperation.
        /// </summary>
        internal static string Exception_WrongIAsyncResult
        {
            get { return GetString("Exception_WrongIAsyncResult"); }
        }

        /// <summary>
        /// The given IAsyncResult does not match this opperation.
        /// </summary>
        internal static string FormatException_WrongIAsyncResult()
        {
            return GetString("Exception_WrongIAsyncResult");
        }

        /// <summary>
        /// An exception occured while running an action registered with {0}.
        /// </summary>
        internal static string Warning_ExceptionInOnResponseCompletedAction
        {
            get { return GetString("Warning_ExceptionInOnResponseCompletedAction"); }
        }

        /// <summary>
        /// An exception occured while running an action registered with {0}.
        /// </summary>
        internal static string FormatWarning_ExceptionInOnResponseCompletedAction(object p0)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("Warning_ExceptionInOnResponseCompletedAction"), p0);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
