// <auto-generated />
namespace Microsoft.AspNetCore.Server.IIS
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class CoreStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Server.IIS.CoreStrings", typeof(CoreStrings).GetTypeInfo().Assembly);

        /// <summary>
        /// Cannot write to response body after connection has been upgraded.
        /// </summary>
        internal static string ResponseStreamWasUpgraded
        {
            get => GetString("ResponseStreamWasUpgraded");
        }

        /// <summary>
        /// Cannot write to response body after connection has been upgraded.
        /// </summary>
        internal static string FormatResponseStreamWasUpgraded()
            => GetString("ResponseStreamWasUpgraded");

        /// <summary>
        /// The response has been aborted due to an unhandled application exception.
        /// </summary>
        internal static string UnhandledApplicationException
        {
            get => GetString("UnhandledApplicationException");
        }

        /// <summary>
        /// The response has been aborted due to an unhandled application exception.
        /// </summary>
        internal static string FormatUnhandledApplicationException()
            => GetString("UnhandledApplicationException");

        /// <summary>
        /// Cannot upgrade a non-upgradable request. Check IHttpUpgradeFeature.IsUpgradableRequest to determine if a request can be upgraded.
        /// </summary>
        internal static string CannotUpgradeNonUpgradableRequest
        {
            get => GetString("CannotUpgradeNonUpgradableRequest");
        }

        /// <summary>
        /// Cannot upgrade a non-upgradable request. Check IHttpUpgradeFeature.IsUpgradableRequest to determine if a request can be upgraded.
        /// </summary>
        internal static string FormatCannotUpgradeNonUpgradableRequest()
            => GetString("CannotUpgradeNonUpgradableRequest");

        /// <summary>
        /// IHttpUpgradeFeature.UpgradeAsync was already called and can only be called once per connection.
        /// </summary>
        internal static string UpgradeCannotBeCalledMultipleTimes
        {
            get => GetString("UpgradeCannotBeCalledMultipleTimes");
        }

        /// <summary>
        /// IHttpUpgradeFeature.UpgradeAsync was already called and can only be called once per connection.
        /// </summary>
        internal static string FormatUpgradeCannotBeCalledMultipleTimes()
            => GetString("UpgradeCannotBeCalledMultipleTimes");

        /// <summary>
        /// Synchronous operations are disallowed. Call ReadAsync or set AllowSynchronousIO to true instead.
        /// </summary>
        internal static string SynchronousReadsDisallowed
        {
            get => GetString("SynchronousReadsDisallowed");
        }

        /// <summary>
        /// Synchronous operations are disallowed. Call ReadAsync or set AllowSynchronousIO to true instead.
        /// </summary>
        internal static string FormatSynchronousReadsDisallowed()
            => GetString("SynchronousReadsDisallowed");

        /// <summary>
        /// Synchronous operations are disallowed. Call WriteAsync or set AllowSynchronousIO to true instead.
        /// </summary>
        internal static string SynchronousWritesDisallowed
        {
            get => GetString("SynchronousWritesDisallowed");
        }

        /// <summary>
        /// Synchronous operations are disallowed. Call WriteAsync or set AllowSynchronousIO to true instead.
        /// </summary>
        internal static string FormatSynchronousWritesDisallowed()
            => GetString("SynchronousWritesDisallowed");

        /// <summary>
        /// Cannot write to the response body, the response has completed.
        /// </summary>
        internal static string WritingToResponseBodyAfterResponseCompleted
        {
            get => GetString("WritingToResponseBodyAfterResponseCompleted");
        }

        /// <summary>
        /// Cannot write to the response body, the response has completed.
        /// </summary>
        internal static string FormatWritingToResponseBodyAfterResponseCompleted()
            => GetString("WritingToResponseBodyAfterResponseCompleted");

        /// <summary>
        /// The connection was aborted by the application.
        /// </summary>
        internal static string ConnectionAbortedByApplication
        {
            get => GetString("ConnectionAbortedByApplication");
        }

        /// <summary>
        /// The connection was aborted by the application.
        /// </summary>
        internal static string FormatConnectionAbortedByApplication()
            => GetString("ConnectionAbortedByApplication");

        /// <summary>
        /// The connection or stream was aborted because a write operation was aborted with a CancellationToken.
        /// </summary>
        internal static string ConnectionOrStreamAbortedByCancellationToken
        {
            get => GetString("ConnectionOrStreamAbortedByCancellationToken");
        }

        /// <summary>
        /// The connection or stream was aborted because a write operation was aborted with a CancellationToken.
        /// </summary>
        internal static string FormatConnectionOrStreamAbortedByCancellationToken()
            => GetString("ConnectionOrStreamAbortedByCancellationToken");

        /// <summary>
        /// {name} cannot be set because the response has already started.
        /// </summary>
        internal static string ParameterReadOnlyAfterResponseStarted
        {
            get => GetString("ParameterReadOnlyAfterResponseStarted");
        }

        /// <summary>
        /// {name} cannot be set because the response has already started.
        /// </summary>
        internal static string FormatParameterReadOnlyAfterResponseStarted(object name)
            => string.Format(CultureInfo.CurrentCulture, GetString("ParameterReadOnlyAfterResponseStarted", "name"), name);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
