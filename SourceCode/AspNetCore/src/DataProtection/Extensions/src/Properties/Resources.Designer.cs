// <auto-generated />
namespace Microsoft.AspNetCore.DataProtection.Extensions
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.DataProtection.Extensions.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// An error occurred during a cryptographic operation.
        /// </summary>
        internal static string CryptCommon_GenericError
        {
            get => GetString("CryptCommon_GenericError");
        }

        /// <summary>
        /// An error occurred during a cryptographic operation.
        /// </summary>
        internal static string FormatCryptCommon_GenericError()
            => GetString("CryptCommon_GenericError");

        /// <summary>
        /// The payload expired at {0}.
        /// </summary>
        internal static string TimeLimitedDataProtector_PayloadExpired
        {
            get => GetString("TimeLimitedDataProtector_PayloadExpired");
        }

        /// <summary>
        /// The payload expired at {0}.
        /// </summary>
        internal static string FormatTimeLimitedDataProtector_PayloadExpired(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("TimeLimitedDataProtector_PayloadExpired"), p0);

        /// <summary>
        /// The payload is invalid.
        /// </summary>
        internal static string TimeLimitedDataProtector_PayloadInvalid
        {
            get => GetString("TimeLimitedDataProtector_PayloadInvalid");
        }

        /// <summary>
        /// The payload is invalid.
        /// </summary>
        internal static string FormatTimeLimitedDataProtector_PayloadInvalid()
            => GetString("TimeLimitedDataProtector_PayloadInvalid");

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
