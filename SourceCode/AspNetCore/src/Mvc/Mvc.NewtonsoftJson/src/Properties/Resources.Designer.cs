// <auto-generated />
namespace Microsoft.AspNetCore.Mvc.NewtonsoftJson
{
    using System.Globalization;
    using System.Reflection;
    using System.Resources;

    internal static class Resources
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("Microsoft.AspNetCore.Mvc.NewtonsoftJson.Resources", typeof(Resources).GetTypeInfo().Assembly);

        /// <summary>
        /// {0} cannot be null.
        /// </summary>
        internal static string ContractResolverCannotBeNull
        {
            get => GetString("ContractResolverCannotBeNull");
        }

        /// <summary>
        /// {0} cannot be null.
        /// </summary>
        internal static string FormatContractResolverCannotBeNull(object p0)
            => string.Format(CultureInfo.CurrentCulture, GetString("ContractResolverCannotBeNull"), p0);

        /// <summary>
        /// Cannot configure JSON casing behavior on '{0}' contract resolver. The supported contract resolver is {1}.
        /// </summary>
        internal static string InvalidContractResolverForJsonCasingConfiguration
        {
            get => GetString("InvalidContractResolverForJsonCasingConfiguration");
        }

        /// <summary>
        /// Cannot configure JSON casing behavior on '{0}' contract resolver. The supported contract resolver is {1}.
        /// </summary>
        internal static string FormatInvalidContractResolverForJsonCasingConfiguration(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("InvalidContractResolverForJsonCasingConfiguration"), p0, p1);

        /// <summary>
        /// Parameter '{0}' must be an instance of {1} provided by the '{2}' package. Configure the correct instance using '{3}' in your startup.
        /// </summary>
        internal static string JsonHelperMustBeAnInstanceOfNewtonsoftJson
        {
            get => GetString("JsonHelperMustBeAnInstanceOfNewtonsoftJson");
        }

        /// <summary>
        /// Parameter '{0}' must be an instance of {1} provided by the '{2}' package. Configure the correct instance using '{3}' in your startup.
        /// </summary>
        internal static string FormatJsonHelperMustBeAnInstanceOfNewtonsoftJson(object p0, object p1, object p2, object p3)
            => string.Format(CultureInfo.CurrentCulture, GetString("JsonHelperMustBeAnInstanceOfNewtonsoftJson"), p0, p1, p2, p3);

        /// <summary>
        /// Property '{0}.{1}' must be an instance of type '{2}'.
        /// </summary>
        internal static string Property_MustBeInstanceOfType
        {
            get => GetString("Property_MustBeInstanceOfType");
        }

        /// <summary>
        /// Property '{0}.{1}' must be an instance of type '{2}'.
        /// </summary>
        internal static string FormatProperty_MustBeInstanceOfType(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("Property_MustBeInstanceOfType"), p0, p1, p2);

        /// <summary>
        /// Cannot deserialize {0} of type '{1}'.
        /// </summary>
        internal static string TempData_CannotDeserializeToken
        {
            get => GetString("TempData_CannotDeserializeToken");
        }

        /// <summary>
        /// Cannot deserialize {0} of type '{1}'.
        /// </summary>
        internal static string FormatTempData_CannotDeserializeToken(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("TempData_CannotDeserializeToken"), p0, p1);

        /// <summary>
        /// The '{0}' cannot serialize a dictionary with a key of type '{1}'. The key must be of type '{2}'.
        /// </summary>
        internal static string TempData_CannotSerializeDictionary
        {
            get => GetString("TempData_CannotSerializeDictionary");
        }

        /// <summary>
        /// The '{0}' cannot serialize a dictionary with a key of type '{1}'. The key must be of type '{2}'.
        /// </summary>
        internal static string FormatTempData_CannotSerializeDictionary(object p0, object p1, object p2)
            => string.Format(CultureInfo.CurrentCulture, GetString("TempData_CannotSerializeDictionary"), p0, p1, p2);

        /// <summary>
        /// The '{0}' cannot serialize an object of type '{1}'.
        /// </summary>
        internal static string TempData_CannotSerializeType
        {
            get => GetString("TempData_CannotSerializeType");
        }

        /// <summary>
        /// The '{0}' cannot serialize an object of type '{1}'.
        /// </summary>
        internal static string FormatTempData_CannotSerializeType(object p0, object p1)
            => string.Format(CultureInfo.CurrentCulture, GetString("TempData_CannotSerializeType"), p0, p1);

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            System.Diagnostics.Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
